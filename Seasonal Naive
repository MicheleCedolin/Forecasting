Results = []
MAE = []
MSE = []
MAPE = []
SMAPE = []
TEST = []
COMPUTATIONAL_TIME = []

# Define helper functions
def smape(y_test, y_pred):
    return np.mean((2 * np.abs(y_pred - y_test)) / (np.abs(y_test) + np.abs(y_pred)))

def mape(y_test, y_pred):
    return np.mean(np.abs(y_test - y_pred) / np.abs(y_test))

# Split data into training and test sets
train_data = NN5.iloc[:735]
test_data = NN5.iloc[735:]

# Loop over each column to generate forecasts and calculate errors
for i in range(1, 112):
    y_train = np.array(train_data.iloc[:, [i]])
    y_test = np.array(test_data.iloc[:, [i]])

    # Extract the last 7 days from the training data
    last_week = np.concatenate(y_train[-7:])

    # Repeat the last 7 days to cover the 56-day forecasting horizon
    y_pred = np.tile(last_week, 8)[:56]

    start_time = time.time()  # Start time before training
    end_time = time.time()  # End time after training

    computational_time = end_time - start_time
    COMPUTATIONAL_TIME.append(computational_time)

    mae = mean_absolute_error(y_test, y_pred)
    mse = mean_squared_error(y_test, y_pred)

    MAE.append(mae)
    MSE.append(mse)
    MAPE.append(mape(y_test, y_pred))
    SMAPE.append(smape(y_test, y_pred))

    Results.append(y_pred)
    TEST.append(y_test)

# Create DataFrames for errors, forecasts, and computational time
error = [MAE, MSE, MAPE, SMAPE]
Error = pd.DataFrame(error, index=["MAE", "MSE", "MAPE", "SMAPE"]).T
Forecast = pd.DataFrame(Results).T
ComputationalTime = pd.DataFrame(COMPUTATIONAL_TIME, columns=["Computational Time"])

# Save results to CSV files
Error.to_csv('/content/drive/My Drive/Comparative Forecasting/NN5Results/SeasonalNaiveError.csv', index=False)
Forecast.to_csv('/content/drive/My Drive/Comparative Forecasting/NN5Results/SeasonalNaiveForecast.csv', index=False)
ComputationalTime.to_csv('/content/drive/My Drive/Comparative Forecasting/NN5Results/SeasonalNaiveComputationalTime.csv', index=False)
